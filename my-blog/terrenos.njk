---
layout: "base.njk"
title: "Explora Terrenos en Venta en Ecuador"
---

<!-- Mapbox GL JS and CSS (Specific to this page) -->
<script src='https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css' rel='stylesheet' />

<style>
    /* Styles for the map and its popups */
    #map {
        width: 100%;
        height: 75vh;
    }
    .marker {
        background-color: #2563eb; width: 20px; height: 20px;
        border-radius: 50%; border: 2px solid white; cursor: pointer;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.3);
    }
    .mapboxgl-popup { max-width: 300px; font-family: 'Poppins', sans-serif; }
    .mapboxgl-popup-content { padding: 0; box-shadow: 0 4px 12px rgba(0,0,0,0.15); border-radius: 8px; }
    .mapboxgl-popup-content img { width: 100%; height: 150px; object-fit: cover; border-top-left-radius: 8px; border-top-right-radius: 8px; }
    .mapboxgl-popup-close-button { color: white; background-color: rgba(0,0,0,0.5); border-radius: 50%; margin: 8px 8px 0 0; }
</style>

<div class="container mx-auto px-6 py-12">

    <!-- Advanced Filter Controls -->
    <div class="mb-8 p-3 bg-gray-50 rounded-lg shadow-md border border-gray-200">
        <form id="filter-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 items-end">
            <!-- Location Filters -->
            <div>
                <label for="province-filter" class="block text-sm font-medium text-gray-700 mb-1">Provincia</label>
                <select id="province-filter" class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white">
                    <option value="">Todas</option>
                </select>
            </div>
            <div>
                <label for="city-filter" class="block text-sm font-medium text-gray-700 mb-1">Ciudad</label>
                <select id="city-filter" class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white" disabled>
                    <option value="">Todas</option>
                </select>
            </div>
            <!-- Keyword Search -->
            <div>
                <label for="keyword-search" class="block text-sm font-medium text-gray-700 mb-1">Palabra Clave</label>
                <input type="text" id="keyword-search" placeholder="Ej: playa, comercial..." class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white">
            </div>
             <!-- Price Filters -->
            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label for="min-price" class="block text-sm font-medium text-gray-700 mb-1">Precio Mín.</label>
                    <input type="number" id="min-price" placeholder="$" class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white">
                </div>
                 <div>
                    <label for="max-price" class="block text-sm font-medium text-gray-700 mb-1">Precio Máx.</label>
                    <input type="number" id="max-price" placeholder="$" class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white">
                </div>
            </div>
            <!-- Buttons -->
            <div class="col-span-1 md:col-span-2 lg:col-span-4 flex flex-col sm:flex-row gap-3 mt-3">
                 <button type="submit" class="w-full sm:w-auto flex-grow px-4 py-1.5 text-sm bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors">
                    <i data-lucide="search" class="inline-block w-4 h-4 mr-2"></i>Aplicar Filtros
                </button>
                 <button type="button" id="reset-btn" class="w-full sm:w-auto px-4 py-1.5 text-sm bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700 transition-colors">
                    <i data-lucide="rotate-ccw" class="inline-block w-4 h-4 mr-2"></i>Limpiar
                </button>
                <!-- View Toggle -->
                <div class="flex items-center bg-gray-200 rounded-full p-1 ml-auto">
                    <button type="button" id="show-map-btn" class="px-4 py-1.5 text-sm font-semibold rounded-full bg-blue-600 text-white shadow">
                        <i data-lucide="map" class="inline-block w-4 h-4 mr-1"></i> Mapa
                    </button>
                    <button type="button" id="show-list-btn" class="px-4 py-1.5 text-sm font-semibold rounded-full text-gray-700">
                        <i data-lucide="list" class="inline-block w-4 h-4 mr-1"></i> Lista
                    </button>
                </div>
            </div>
        </form>
    </div>

    <p id="message" class="text-center text-gray-600 py-8">Cargando terrenos...</p>
    
    <div id="map-view">
        <div id='map' class="rounded-lg shadow-lg"></div>
    </div>

    <div id="list-view" class="hidden">
        <div id="listings-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"></div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- DOM Elements ---
        const messageElement = document.getElementById('message');
        const filterForm = document.getElementById('filter-form');
        const provinceFilter = document.getElementById('province-filter');
        const cityFilter = document.getElementById('city-filter');
        const keywordSearch = document.getElementById('keyword-search');
        const minPriceInput = document.getElementById('min-price');
        const maxPriceInput = document.getElementById('max-price');
        const resetBtn = document.getElementById('reset-btn');
        const showMapBtn = document.getElementById('show-map-btn');
        const showListBtn = document.getElementById('show-list-btn');
        const mapView = document.getElementById('map-view');
        const listView = document.getElementById('list-view');
        const listingsContainer = document.getElementById('listings-container');

        // --- State ---
        const API_ENDPOINT = 'https://us-central1-ultimate-life-472800-r4.cloudfunctions.net/get_all_listings';
        let allListings = [];
        let map;
        let markers = [];
        

        // --- NEW HELPER FUNCTION: Slugify ---
        function slugify(text) {
            if (!text) return '';
            return text
                .toString()
                .toLowerCase()
                .replace(/\s+/g, '-')      
                .replace(/[^\w-]+/g, '')   
                .replace(/--+/g, '-')      
                .replace(/^-+/, '')        
                .replace(/-+$/, '');       
        }

        // --- NEW HELPER FUNCTION: Build URL ---
        function buildListingURL(listing) {
            const last6 = listing._id?.slice(-6) || '';
            const slug = slugify(listing.titulo || '');
            return `/anuncios/${slug}-${last6}`;
        }
        
        // --- Mapbox Initialization ---
        function initMap() {
            mapboxgl.accessToken = 'pk.eyJ1IjoiY2hpcG1vcmVubyIsImEiOiJjbWZzcTAzYWUwbWdkMm5wd3pwaHZpdzA2In0.PlN6xmaS36bINGV8N_F9kA';
            map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v12',
                center: [-79.0045, -2.8974],
                zoom: 6
            });
            map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');
        }

        // --- Data Fetching ---
        async function fetchAllListings() {
            try {
                const response = await fetch(API_ENDPOINT);
                if (!response.ok) throw new Error('Network response failed');
                
                const responseData = await response.json();
                
                if (responseData.listings && responseData.listings.length > 0) {
                    messageElement.style.display = 'none';
                    allListings = responseData.listings;
                    populateFilters(allListings);
                    render(allListings);
                } else {
                    messageElement.textContent = 'No hay terrenos disponibles en este momento.';
                }
            } catch (error) {
                console.error('Fetch error:', error);
                messageElement.textContent = 'Ocurrió un error al cargar los terrenos. Por favor, intenta de nuevo.';
                messageElement.style.color = 'red';
            }
        }
        
        // --- Filter Population ---
        function populateFilters(listings) {
            const provinces = [...new Set(listings.map(l => l.provincia).filter(Boolean))].sort();
            provinces.forEach(province => {
                const option = document.createElement('option');
                option.value = province;
                option.textContent = province;
                provinceFilter.appendChild(option);
            });

            provinceFilter.addEventListener('change', () => {
                const selectedProvince = provinceFilter.value;
                cityFilter.innerHTML = '<option value="">Todas</option>';
                if (!selectedProvince) {
                    cityFilter.disabled = true;
                    return;
                }
                const cities = [...new Set(listings.filter(l => l.provincia === selectedProvince && l.ciudad).map(l => l.ciudad))].sort();
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city;
                    option.textContent = city;
                    cityFilter.appendChild(option);
                });
                cityFilter.disabled = false;
            });
        }

        // --- Advanced Filtering Logic ---
        function applyFilters() {
            const selectedProvince = provinceFilter.value;
            const selectedCity = cityFilter.value;
            const keyword = keywordSearch.value.toLowerCase().trim();
            const minPrice = parseFloat(minPriceInput.value);
            const maxPrice = parseFloat(maxPriceInput.value);

            const filteredListings = allListings.filter(listing => {
                if (selectedProvince && listing.provincia !== selectedProvince) return false;
                if (selectedCity && listing.ciudad !== selectedCity) return false;
                if (keyword) {
                    const titleMatch = listing.titulo?.toLowerCase().includes(keyword);
                    const descriptionMatch = listing.descripcion?.toLowerCase().includes(keyword);
                    if (!titleMatch && !descriptionMatch) return false;
                }
                if (!isNaN(minPrice) && listing.precio < minPrice) return false;
                if (!isNaN(maxPrice) && listing.precio > maxPrice) return false;
                return true;
            });
            render(filteredListings);
        }
        
        // --- Rendering Functions ---
        function render(listingsToRender) {
            populateMap(listingsToRender);
            renderListings(listingsToRender);
            if (listingsToRender.length === 0 && allListings.length > 0) {
                messageElement.textContent = 'No se encontraron terrenos con esos filtros. Intenta con una búsqueda más amplia.';
                messageElement.style.display = 'block';
            } else if (allListings.length > 0) {
                messageElement.style.display = 'none';
            }
        }
        
        function populateMap(listings) {
            markers.forEach(marker => marker.remove());
            markers = [];
            listings.forEach(listing => {
                if (listing.location?.coordinates?.length === 2) {
                    const [longitude, latitude] = listing.location.coordinates;
                    const el = document.createElement('div');
                    el.className = 'marker';
                    const firstPhoto = listing.photos?.[0] || 'https://via.placeholder.com/300x150.png?text=Sin+Foto';
                    const url = buildListingURL(listing);
                    
                    const popupHTML = `
                        <div>
                            <img src="${firstPhoto}" alt="${listing.titulo}">
                            <div class="p-3">
                                <h3 class="font-bold text-base text-gray-900 mb-1">${listing.titulo}</h3>
                                <p class="font-bold text-blue-700 text-lg mb-2">$${listing.precio.toLocaleString()}</p>
                                <a href="${url}" class="text-sm font-semibold text-blue-600 hover:underline">Ver Detalles &rarr;</a>
                            </div>
                        </div>
                    `;
                    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(popupHTML);
                    const newMarker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).setPopup(popup).addTo(map);
                    markers.push(newMarker);
                }
            });
        }

        function renderListings(listings) {
            listingsContainer.innerHTML = '';
            if (listings.length === 0) {
                listingsContainer.innerHTML = '<p class="col-span-full text-center text-gray-500">No se encontraron terrenos con ese criterio de búsqueda.</p>';
                return;
            }
            listings.forEach(listing => {
                const firstPhoto = listing.photos?.[0] || 'https://via.placeholder.com/400x300.png?text=Sin+Foto';
                const card = document.createElement('div');
                card.className = 'bg-white rounded-lg shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300';
                const url = buildListingURL(listing);
                
                card.innerHTML = `
                    <a href="${url}">
                        <img src="${firstPhoto}" alt="${listing.titulo}" class="w-full h-56 object-cover">
                        <div class="p-6">
                            <h3 class="text-xl font-bold mb-2 truncate">${listing.titulo}</h3>
                            <p class="text-gray-600 mb-2">${listing.ciudad || ''}, ${listing.provincia || ''}</p>
                            <p class="text-gray-700 mb-4">${listing.area || 'N/A'} m²</p>
                            <div class="text-2xl font-bold text-green-600">$${listing.precio.toLocaleString()}</div>
                        </div>
                    </a>
                `;
                listingsContainer.appendChild(card);
            });
        }

        // --- Event Listeners ---
        filterForm.addEventListener('submit', (e) => {
            e.preventDefault();
            applyFilters();
        });

        resetBtn.addEventListener('click', () => {
            filterForm.reset();
            cityFilter.innerHTML = '<option value="">Todas</option>';
            cityFilter.disabled = true;
            render(allListings);
        });

        showMapBtn.addEventListener('click', () => {
            listView.classList.add('hidden');
            mapView.classList.remove('hidden');
            showMapBtn.classList.add('bg-blue-600', 'text-white', 'shadow');
            showListBtn.classList.remove('bg-blue-600', 'text-white', 'shadow');
            map.resize();
        });

        showListBtn.addEventListener('click', () => {
            mapView.classList.add('hidden');
            listView.classList.remove('hidden');
            showListBtn.classList.add('bg-blue-600', 'text-white', 'shadow');
            showMapBtn.classList.remove('bg-blue-600', 'text-white', 'shadow');
        });

        // --- Initial Load ---
        initMap();
        fetchAllListings();
    });
</script>
